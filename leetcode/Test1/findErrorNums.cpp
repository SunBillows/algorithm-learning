//题目描述：645. 错误的集合
/*
	集合 s 包含从 1 到 n 的整数。不幸的是，因为数据错误，导致集合里面某一个数字复制了成了集合里面的另外一个数字的值，导致集合 丢失了一个数字 并且 有一个数字重复 。
	给定一个数组 nums 代表了集合 S 发生错误后的结果。
	请你找出重复出现的整数，再找到丢失的整数，将它们以数组的形式返回。
*/

//解题思路1：
/*
	方法一：排序
	将数组排序之后，比较每对相邻的元素，即可找到错误的集合。
	寻找重复的数字较为简单，如果相邻的两个元素相等，则该元素为重复的数字。
	寻找丢失的数字相对复杂，可能有以下两种情况：
		如果丢失的数字大于 1 且小于 n，则一定存在相邻的两个元素的差等于 2，这两个元素之间的值即为丢失的数字；
		如果丢失的数字是 1 或 n，则需要另外判断。
		为了寻找丢失的数字，需要在遍历已排序数组的同时记录上一个元素，然后计算当前元素与上一个元素的差。考虑到丢失的数字可能是 1，因此需要将上一个元素初始化为 0。
		当丢失的数字小于 n 时，通过计算当前元素与上一个元素的差，即可得到丢失的数字；
		如果 nums[n−1] != n，则丢失的数字是 n。
*/

//解题思路2：
/*
	方法二：哈希表
	重复的数字在数组中出现 2 次，丢失的数字在数组中出现 0 次，其余的每个数字在数组中出现 1 次。因此可以使用哈希表记录每个元素在数组中出现的次数，
	然后遍历从 1 到 n 的每个数字，分别找到出现 2 次和出现 0 次的数字，即为重复的数字和丢失的数字。
*/

class Solution 
{
public:
    vector<int> findErrorNums_1(vector<int>& nums) 
    {
        sort(nums.begin(),nums.end());
        int n = nums.size();

        vector<int> v(2);

        //设置一个 cur 当做该坐标数组的前一个元素的值
        int cur = 0;
        //遍历数组
        for(int i = 0;i < n;i++)
        {
            //如果该坐标的值 == cur ，则说明该坐标的值为重复的值
            if(nums[i] == cur)
            {
                v[0] = nums[i];
            }
            //如果该坐标的值与 cur 的差超过 1 ，则说明丢失的值为两个元素中的元素
            else if(nums[i] - cur > 1)
            {
                v[1] = cur + 1;
            }
            //将当前数组的元素赋值给cur
            cur = nums[i];
        }

        if(nums[n - 1] != n)
        {
            v[1] = n;
        }

        return v;
    }

	vector<int> findErrorNums_2(vector<int>& nums) 
    {
        vector<int> ans(2);
        int n = nums.size();

        unordered_map<int,int> map;
        //将数组中的数插入哈希表中
        for(auto i : nums)
        {
            map[i]++;
        }
        //开始遍历
        for(int i = 1; i <= n;i++)
        {
            //在哈希表中查找各个元素
            if(map.count(i))
            {
                //若该元素在哈希表中存在，则判断该元素的 value 值是否为2
                if(map[i] == 2)
                    //若为 2 ，则说明该元素重复出现
                    ans[0] = i;
            }
            //若未查找到该元素，则说明该元素就为丢失的元素
            else
                ans[1] = i;
        }
        return ans;
    }
};