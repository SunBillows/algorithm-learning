//题目描述：
/*
给定一个大小为 n 的数组 nums ，返回其中的多数元素。多数元素是指在数组中出现次数 大于 ⌊ n/2 ⌋ 的元素。
你可以假设数组是非空的，并且给定的数组总是存在多数元素。
*/

//思路分析：
/*
思路
我们知道出现次数最多的元素大于 2/n 次，所以可以用哈希表来快速统计每个元素出现的次数。

算法
我们使用哈希映射（HashMap）来存储每个元素以及出现的次数。对于哈希映射中的每个键值对，键表示一个元素，值表示该元素出现的次数。
我们用一个循环遍历数组 nums 并将数组中的每个元素加入哈希映射中。在这之后，我们遍历哈希映射中的所有键值对，返回值最大的键。
我们同样也可以在遍历数组 nums 时候使用打擂台的方法，维护最大的值，这样省去了最后对哈希映射的遍历
*/

class Solution 
{
public:
    int majorityElement(vector<int>& nums) 
    {
        //创建一个哈希表，键为数组中的元素，值为该元素在数组中出线的次数
        unordered_map<int,int> map;

		//第一个变量：majority 为哈希表中最大的值
        int majority = 0;
		//第二个变量：cur_num 为哈希表中出现最多次数值的键
        int cur_num;
		
        //遍历数组，将数组中元素插入到哈希表中
        for(int i = 0;i<nums.size();i++)
        {
            //每当数组中一个元素插入到哈希表中的键中时，其值便+1；
            ++map[nums[i]];

            //当哈希表中所对应键的值大于 majority 时，则此键为数组中出线次数最多的元素，将数组中该元素赋值给 cur_num
            if(map[nums[i]] > majority)
            {
                majority = map[nums[i]];
                cur_num = nums[i];
            }
        }

		//找到数组中出现次数最多的元素并返回；
        return cur_num;
    }
};

